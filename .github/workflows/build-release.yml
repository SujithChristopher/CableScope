name: Build and Release CableScope

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write  # Required for creating releases
  
jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            output_name: CableScope-Windows-x64
            python_arch: x64
          # TODO: Fix Linux and macOS builds later
          # - os: ubuntu-latest
          #   output_name: CableScope-Linux-x64
          #   python_arch: x64
          # - os: macos-latest
          #   output_name: CableScope-macOS-x64
          #   python_arch: x64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        architecture: ${{ matrix.python_arch }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('python_gui/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r python_gui/requirements.txt
        pip install pyinstaller
        
    - name: Install platform-specific dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libxcb-xinerama0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0
        
    - name: Test Python imports
      run: |
        cd python_gui
        python -c "import PySide6; print('PySide6 OK')"
        python -c "import pyqtgraph; print('pyqtgraph OK')"
        python -c "import serial; print('serial OK')"
        
    - name: Build with PyInstaller (Windows)
      if: runner.os == 'Windows'
      run: |
        cd python_gui
        python -m PyInstaller cablescope.spec --clean --noconfirm
        dir dist
        if (Test-Path "dist/CableScope") {
          Compress-Archive -Path dist/CableScope -DestinationPath ../CableScope-Windows-x64.zip
        } else {
          Write-Error "Build directory not found"
          exit 1
        }
      shell: pwsh
      
    - name: Build with PyInstaller (Linux)
      if: runner.os == 'Linux'
      run: |
        cd python_gui
        python -m PyInstaller cablescope.spec --clean --noconfirm
        ls -la dist/
        if [ -d "dist/CableScope" ]; then
          tar -czvf ../CableScope-Linux-x64.tar.gz -C dist CableScope
        else
          echo "Build directory not found"
          exit 1
        fi
        
    - name: Build with PyInstaller (macOS)
      if: runner.os == 'macOS'
      run: |
        cd python_gui
        python -m PyInstaller cablescope.spec --clean --noconfirm
        ls -la dist/
        if [ -d "dist/CableScope" ]; then
          cd dist && zip -r ../../CableScope-macOS-x64.zip CableScope
        else
          echo "Build directory not found"
          exit 1
        fi
        
    - name: Verify build output (Windows)
      if: runner.os == 'Windows'
      run: |
        dir
        if (Test-Path "CableScope-Windows-x64.zip") { Write-Host "✅ Windows build successful" } else { Write-Host "❌ Windows build failed" }
      shell: pwsh
        
    - name: Verify build output (Unix)
      if: runner.os != 'Windows'  
      run: |
        ls -la
        if [ -f "CableScope-*.tar.gz" ] || [ -f "CableScope-*.zip" ]; then echo "✅ Build successful"; else echo "❌ Build failed"; fi
        
    # Upload artifacts for debugging
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.output_name }}
        path: |
          CableScope-*.zip
          CableScope-*.tar.gz
          
    # Create release assets
    - name: Prepare release asset (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "ASSET_NAME=CableScope-Windows-x64.zip" >> $env:GITHUB_ENV
        echo "ASSET_PATH=CableScope-Windows-x64.zip" >> $env:GITHUB_ENV
        
    - name: Prepare release asset (Linux)
      if: runner.os == 'Linux'
      run: |
        echo "ASSET_NAME=CableScope-Linux-x64.tar.gz" >> $GITHUB_ENV
        echo "ASSET_PATH=CableScope-Linux-x64.tar.gz" >> $GITHUB_ENV
        
    - name: Prepare release asset (macOS)  
      if: runner.os == 'macOS'
      run: |
        echo "ASSET_NAME=CableScope-macOS-x64.zip" >> $GITHUB_ENV
        echo "ASSET_PATH=CableScope-macOS-x64.zip" >> $GITHUB_ENV

  # Create release if triggered by tag
  create-release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: CableScope-Windows-x64
        path: .
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        name: CableScope ${{ github.ref_name }}
        body: |
          ## CableScope Motor Control System ${{ github.ref_name }}
          
          ### 🚀 What's New
          - Complete motor control system with real-time plotting
          - Arduino CLI auto-download functionality (no manual setup required!)
          - Enhanced CSV recording with desired vs actual torque tracking
          - Unified control and plotting interface
          - Teensy 4.1 support with optimized communication protocol
          
          ### 📦 Installation
          1. Download the package for your platform
          2. Extract and run the executable
          3. Arduino CLI will be downloaded automatically on first use
          
          ### 🔧 Hardware Requirements
          - Teensy 4.1 (recommended) or Arduino variants
          - HX711 torque sensor (pins 32/33)
          - Quadrature encoder (pins 27/28)
          - Motor driver with PWM control (pins 8/9/10)
          
          ### 📖 Documentation
          See README.md for complete setup instructions.
        files: |
          CableScope-*.zip
          CableScope-*.tar.gz
        draft: false
        prerelease: false
        
