name: Build and Release CableScope

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            output_name: CableScope-Windows-x64
            python_arch: x64
          - os: ubuntu-latest
            output_name: CableScope-Linux-x64
            python_arch: x64
          - os: macos-latest
            output_name: CableScope-macOS-x64
            python_arch: x64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        architecture: ${{ matrix.python_arch }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('python_gui/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r python_gui/requirements.txt
        pip install pyinstaller
        
    - name: Install platform-specific dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libxcb-xinerama0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0
        
    - name: Test Python imports
      run: |
        cd python_gui
        python -c "import PySide6; print('PySide6 OK')"
        python -c "import pyqtgraph; print('pyqtgraph OK')"
        python -c "import serial; print('serial OK')"
        
    - name: Build with PyInstaller (Windows)
      if: runner.os == 'Windows'
      run: |
        cd python_gui
        python -m PyInstaller cablescope.spec --clean --noconfirm
        dir dist
        if (Test-Path "dist/CableScope") {
          Compress-Archive -Path dist/CableScope -DestinationPath ../CableScope-Windows-x64.zip
        } else {
          Write-Error "Build directory not found"
          exit 1
        }
      shell: pwsh
      
    - name: Build with PyInstaller (Linux)
      if: runner.os == 'Linux'
      run: |
        cd python_gui
        python -m PyInstaller cablescope.spec --clean --noconfirm
        ls -la dist/
        if [ -d "dist/CableScope" ]; then
          tar -czvf ../CableScope-Linux-x64.tar.gz -C dist CableScope
        else
          echo "Build directory not found"
          exit 1
        fi
        
    - name: Build with PyInstaller (macOS)
      if: runner.os == 'macOS'
      run: |
        cd python_gui
        python -m PyInstaller cablescope.spec --clean --noconfirm
        ls -la dist/
        if [ -d "dist/CableScope" ]; then
          cd dist && zip -r ../../CableScope-macOS-x64.zip CableScope
        else
          echo "Build directory not found"
          exit 1
        fi
        
    - name: Verify build output
      run: |
        ls -la
        
    # Upload artifacts for debugging
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.output_name }}
        path: |
          CableScope-*.zip
          CableScope-*.tar.gz
          
    # Create release assets
    - name: Prepare release asset (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "ASSET_NAME=CableScope-Windows-x64.zip" >> $env:GITHUB_ENV
        echo "ASSET_PATH=CableScope-Windows-x64.zip" >> $env:GITHUB_ENV
        
    - name: Prepare release asset (Linux)
      if: runner.os == 'Linux'
      run: |
        echo "ASSET_NAME=CableScope-Linux-x64.tar.gz" >> $GITHUB_ENV
        echo "ASSET_PATH=CableScope-Linux-x64.tar.gz" >> $GITHUB_ENV
        
    - name: Prepare release asset (macOS)  
      if: runner.os == 'macOS'
      run: |
        echo "ASSET_NAME=CableScope-macOS-x64.zip" >> $GITHUB_ENV
        echo "ASSET_PATH=CableScope-macOS-x64.zip" >> $GITHUB_ENV
        
